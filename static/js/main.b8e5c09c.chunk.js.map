{"version":3,"sources":["components/view/Header.jsx","components/logic/MemeGenerator.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","style","height","width","src","alt","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","assertThisInitialized","handleGenerate","_this2","fetch","then","response","json","memes","data","setState","event","_event$target","target","name","value","defineProperty","preventDefault","random","Math","floor","length","imgUrl","url","onSubmit","htmlFor","type","onChange","placeholder","Component","App","components_view_Header","components_logic_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAceA,eAZA,WACX,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACC,OAAQ,QAASC,MAAO,OACnDC,IAAI,iEACJC,IAAI,aAENR,EAAAC,EAAAC,cAAA,6CC+DOO,qBArEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAGfX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACpBA,EAAKe,eAAiBf,EAAKe,eAAeF,KAApBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAVVA,mFAYM,IAAAgB,EAAAb,KAElBc,MAAM,qCACHC,KAAM,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAM,SAAAC,GAAY,IACVE,EAASF,EAASG,KAAlBD,MACPL,EAAKO,SAAS,CAAEZ,YAAaU,2CAItBG,GAAO,IAAAC,EACID,EAAME,OAArBC,EADWF,EACXE,KAAMC,EADKH,EACLG,MACbzB,KAAKoB,SAALtB,OAAA4B,EAAA,EAAA5B,CAAA,GAAiB0B,EAAQC,2CAGZJ,GACbA,EAAMM,iBACN,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAW5B,KAAKI,MAAMI,YAAYuB,QAC3DC,EAAShC,KAAKI,MAAMI,YAAYoB,GAAQK,IAC9CjC,KAAKoB,SAAS,CAACb,UAAWyB,qCAI1B,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM6C,SAAUlC,KAAKY,gBACnBzB,EAAAC,EAAAC,cAAA,SAAO8C,QAAQ,IACbhD,EAAAC,EAAAC,cAAA,SAAO+C,KAAK,OACVX,MAAOzB,KAAKI,MAAMC,QAClBgC,SAAUrC,KAAKS,aACfe,KAAK,UACLc,YAAY,cAKhBnD,EAAAC,EAAAC,cAAA,SAAO8C,QAAQ,IACbhD,EAAAC,EAAAC,cAAA,SAAO+C,KAAK,OACVX,MAAOzB,KAAKI,MAAME,WAClB+B,SAAUrC,KAAKS,aACfe,KAAK,aACLc,YAAY,iBAIhBnD,EAAAC,EAAAC,cAAA,gCAEFF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOI,IAAKM,KAAKI,MAAMG,UAAWZ,IAAI,SACrDR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,IAAsBU,KAAKI,MAAMC,QAAjC,KACAlB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,IAAyBU,KAAKI,MAAME,WAApC,cA/DkBiC,cCcbC,mLATX,OACErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,cALUH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.b8e5c09c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\nconst Header = () => { \r\n    return (  \r\n      <header>\r\n        <img className=\"pix\" style={{height: \"100px\", width: \"10%\"}}\r\n          src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n          alt=\"Problem?\"\r\n        />\r\n        <h1>Meme Generator</h1>\r\n      </header>\r\n    );\r\n}\r\n \r\nexport default Header;","import React, { Component } from 'react';\r\nimport './MemeGenerator.css'\r\nclass MemeGenerator extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n      allMemeImgs: []\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleGenerate = this.handleGenerate.bind(this)\r\n  }\r\n  componentDidMount() {\r\n    // something here\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then( response => response.json())\r\n      .then( response => {\r\n        const {memes} = response.data;\r\n        this.setState({ allMemeImgs: memes })\r\n      })\r\n  }\r\n\r\n  handleChange(event) {\r\n    const {name, value} = event.target\r\n    this.setState({ [name] : value   })\r\n  }\r\n\r\n  handleGenerate(event) {\r\n    event.preventDefault();\r\n    const random = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n    const imgUrl = this.state.allMemeImgs[random].url;\r\n    this.setState({randomImg: imgUrl})\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <div>\r\n        <form onSubmit={this.handleGenerate}>\r\n          <label htmlFor=\"\">\r\n            <input type=\"text\"\r\n              value={this.state.topText}\r\n              onChange={this.handleChange}\r\n              name=\"topText\"\r\n              placeholder=\"Top Text\"\r\n            />\r\n          </label>\r\n          {/* <br/> */}\r\n\r\n          <label htmlFor=\"\"> \r\n            <input type=\"text\"\r\n              value={this.state.bottomText}\r\n              onChange={this.handleChange}\r\n              name=\"bottomText\"\r\n              placeholder=\"Bottom Text\"\r\n            />\r\n          </label>\r\n\r\n          <button>Generate Meme</button>\r\n        </form>\r\n        <section>\r\n          <img className=\"meme\" src={this.state.randomImg} alt=\"Meme\" />\r\n          <h2 className=\"top\"> {this.state.topText} </h2>\r\n          <h2 className=\"bottom\"> {this.state.bottomText} </h2>\r\n        </section>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default MemeGenerator;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/view/Header';\nimport MemeGenerator from './components/logic/MemeGenerator';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <MemeGenerator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}